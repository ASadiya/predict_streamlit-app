# -*- coding: utf-8 -*-
"""pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Cm17U_6e03SCofV6IcYPCyFbhAOkbkTW

# Préparation de la pipeline

Afin de permettre l'utilisation du meilleur modèle (RandomForestRegressor optimisé) avec une interface graphique, mettons en place une pipeline.
"""

import pandas as pd
from sklearn.preprocessing import StandardScaler, OneHotEncoder, FunctionTransformer
from sklearn.model_selection import train_test_split
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
import joblib

data = pd.read_excel("Insurance-data.xlsx")

X = data.drop('charges', axis=1)
Y = data['charges']

categorical_var = X.select_dtypes(include=['object']).columns
numeric_var = X.select_dtypes(include=['int64', 'float64']).columns

def recode_region(X):
    def recode_region_single(region):
        if region in ['northwest', 'southwest']:
            return 'West'
        else:
            return 'East'

    X['region'] = X['region'].apply(recode_region_single)
    return X


categorical_pipeline = Pipeline(steps= [
    ('recode_region', FunctionTransformer(recode_region)),
    ('label_encoder', OneHotEncoder())
    ])


preprocessor = ColumnTransformer(
    transformers=[
        ('cat', categorical_pipeline, categorical_var),
        ('num', 'passthrough', numeric_var)
    ]
)

pipeline = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('scaler', StandardScaler()),
    ('regression', RandomForestRegressor(max_depth = None, max_features = 'auto', min_samples_leaf = 4, min_samples_split = 10, n_estimators = 300))
])

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)

pipeline.fit(X_train, Y_train)

joblib.dump(pipeline, 'model_pipeline.joblib')